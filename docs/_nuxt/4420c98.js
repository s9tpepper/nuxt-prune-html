(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{273:function(t,e,o){var content=o(282);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,o(58).default)("113c3f9c",content,!1,{sourceMap:!1})},281:function(t,e,o){"use strict";o(273)},282:function(t,e,o){var n=o(57)(!1);n.push([t.i,".readme[data-v-13e3c915] >section>p:nth-child(2){display:flex;flex:1 1 100%;flex-direction:row;flex-wrap:nowrap;min-height:36px;padding:6px 12px;overflow-x:auto;font-size:0;background-color:rgba(220,230,240,.63);border-radius:5px}.readme[data-v-13e3c915]  a{display:inline-block;margin:2px 1px}.readme[data-v-13e3c915]  blockquote{margin:1rem auto;padding:4px 0 4px 1.5rem;color:#819198;border-left:.3rem solid #dce6f0}.readme[data-v-13e3c915]  blockquote p{margin:0}.readme[data-v-13e3c915]  code{display:inline-block;padding:0 3px;overflow-y:hidden;vertical-align:middle;background-color:#dce6f0;border-radius:6px}.readme[data-v-13e3c915]  pre code{display:block;padding:.5em;overflow-x:auto;vertical-align:inherit;background-color:#f8f8f8}",""]),t.exports=n},283:function(t,e,o){"use strict";o.r(e);o(47),o(17),o(23),o(45),o(26),o(27),o(35),o(46),o(32);var n=o(7),l=(o(44),o(116),o(48),o(167),o(115),o(59),o(274)),r=o.n(l),c=o(275),d=o.n(c),h=o(276),m=o.n(h);function f(t,e){var o="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!o){if(Array.isArray(t)||(o=function(t,e){if(!t)return;if("string"==typeof t)return y(t,e);var o=Object.prototype.toString.call(t).slice(8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return Array.from(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return y(t,e)}(t))||e&&t&&"number"==typeof t.length){o&&(t=o);var i=0,n=function(){};return{s:n,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var l,r=!0,c=!1;return{s:function(){o=o.call(t)},n:function(){var t=o.next();return r=t.done,t},e:function(t){c=!0,l=t},f:function(){try{r||null==o.return||o.return()}finally{if(c)throw l}}}}function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}var j="<section><p>export default &quot;<section><p>export default &quot;<section><p>export default &quot;<section><p>export default &quot;<section><p>export default &quot;<section><h1>🔌⚡ Nuxt Prune HTML</h1>\\n<p>&lt;a href=&quot;https://luxdamore.github.io/nuxt-prune-html/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code%20quality-A-informational?style=flat&quot; alt=&quot;Code Quality&quot;&gt;</a><br>\\n&lt;a href=&quot;https://npmjs.com/package/@luxdamore/nuxt-prune-html&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dt/@luxdamore/nuxt-prune-html.svg?style=flat&amp;color=darkgreen&quot; alt=&quot;Downloads&quot;&gt;</a><br>\\n&lt;a href=&quot;https://npmjs.com/package/@luxdamore/nuxt-prune-html&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dependencies-up%20to%20date-darkgreen.svg?style=flat&quot; alt=&quot;Dependencies&quot;&gt;</a><br>\\n&lt;a href=&quot;https://circleci.com/gh/LuXDAmore/nuxt-prune-html&quot;&gt;&lt;img src=&quot;https://img.shields.io/circleci/project/github/LuXDAmore/nuxt-prune-html.svg?style=flat&amp;color=darkgreen&quot; alt=&quot;Circle CI&quot;&gt;</a><br>\\n&lt;a href=&quot;https://npmjs.com/package/@luxdamore/nuxt-prune-html&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@luxdamore/nuxt-prune-html/latest.svg?style=flat&amp;color=darkorange&amp;label=version&quot; alt=&quot;Version&quot;&gt;</a><br>\\n&lt;a href=&quot;https://www.paypal.me/luxdamore&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/paypal-donate-black.svg?style=flat&quot; alt=&quot;Donate&quot;&gt;</a></p>\\n<blockquote>\\n<p>Nuxt module to prune html before sending it to the browser (it removes elements matching CSS selector(s)), useful for boosting performance showing a different HTML for bots/audits by removing all the scripts with dynamic rendering.</p>\\n</blockquote>\\n<h2>💘 Motivation</h2>\\n<p>Due to the versatility of Nuxt (and of the SSR in general), a website generated (or served) via node server, has everything it needs already injected in the HTML (ex. <em>css styles</em>). So, usually, for a bot, a audit or for a human, the website its almost visually the same with or without Javascript.</p>\\n<p>This library is born to remove all the scripts injected into the HTML <strong>only</strong> if a visitor is a <strong>Bot</strong> or a <strong>Performance Audit</strong> (ex. <em>a Lighthouse Audit</em>).<br>\\nThis should <strong>speed up</strong> (<strong>blazing fast</strong>) your <em>nuxt-website</em> up to a value of <strong>~99</strong> in <strong>performance</strong> because it &lt;a href=&quot;https://web.dev/lighthouse-performance/&quot;&gt;cheats various scenarios</a>.</p>\\n<p>Usually, with <strong>less assets, resources and html</strong> to download, the number of urls crawled by a bot are <strong>widely boosted</strong> 📈.</p>\\n<blockquote>\\n<p>Inspired by this &lt;a href=&quot;https://github.com/nuxt/rfcs/issues/22&quot;&gt;rcfs</a> and this &lt;a href=&quot;https://github.com/nuxt/nuxt.js/issues/2822&quot;&gt;issue</a>.</p>\\n</blockquote>\\n<h3>Features</h3>\\n<ul>\\n<li>Prune based on <strong>default detection</strong>;\\n<ul>\\n<li>match the <strong>user-agent</strong>;</li>\\n<li>match a <strong>bot</strong>;</li>\\n<li>match an <strong>audit</strong>;</li>\\n<li>match a <strong>custom-header</strong>;</li>\\n</ul>\\n</li>\\n<li>Prune based on <strong>headers values</strong> (<em>useful in/for Lambdas</em>);</li>\\n<li>Prune based on <strong>query parameters</strong> (<em>useful during navigation, hybrid-experience</em>).</li>\\n</ul>\\n<h3>Pro et contra</h3>\\n<blockquote>\\n<p>This could cause some unexpected behaviors, but..</p>\\n</blockquote>\\n<p><strong>Cons.:</strong></p>\\n<ul>\\n<li>No &lt;a href=&quot;https://nuxtjs.org/docs/2.x/concepts/server-side-rendering/#server-side-rendering-steps-with-nuxtjs&quot;&gt;<code>SPA routing</code></a> on <code>client-side</code> for <strong>bots and audits</strong>;</li>\\n<li>No &lt;a href=&quot;https://ssr.vuejs.org/guide/hydration.html&quot;&gt;<code>hydration</code></a> on <code>client-side</code> for <strong>bots and audits</strong>:\\n<ul>\\n<li>ex. &lt;a href=&quot;https://github.com/maoberlehner/vue-lazy-hydration&quot;&gt;<code>vue-lazy-hydration</code></a> need <strong>Javascript client-side code</strong> to trigger <em>hydrateOnInteraction</em>, <em>hydrateWhenIdle</em> or <em>hydrateWhenVisible</em>;</li>\\n</ul>\\n</li>\\n<li>No &lt;a href=&quot;https://nuxtjs.org/api/components-client-only/&quot;&gt;<code>&lt;client-only&gt;</code> components</a>;</li>\\n<li>Can break <code>lazy-load</code> for images.</li>\\n</ul>\\n<p><strong>Pros.:</strong></p>\\n<ul>\\n<li>Some of these features <strong>aren't &quot;used by&quot;</strong> a bot/audit, so you don't really need them:\\n<ul>\\n<li>bots doesn't handle <code>SPA routing</code>;</li>\\n<li>&lt;a href=&quot;https://nuxtjs.org/api/components-client-only/&quot;&gt;<code>&lt;client-only&gt;</code> components</a> could lead in a slower TTI;</li>\\n<li>&lt;a href=&quot;https://nuxtjs.org/api/components-client-only/&quot;&gt;<code>&lt;client-only&gt;</code> components</a> can contain a &lt;a href=&quot;https://nuxtjs.org/api/components-client-only/&quot;&gt;static placeholder</a>;</li>\\n</ul>\\n</li>\\n<li>Images with <code>lazy-load</code> can be fixed with a &lt;a href=&quot;https://web.dev/native-lazy-loading/&quot;&gt;native attribute</a>, with a custom <code>script</code> or with <code>classesSelectorsToKeep</code> (<em>check the configuration</em>);</li>\\n<li><code>Hydration</code> <strong>decrease</strong> performance, so it's ok to prune it for <code>bots or audits</code>;</li>\\n<li><strong>Less HTML, assets and resources</strong> are served to browsers and clients;</li>\\n<li>Bot/audit only have <em>the Javascript they need</em>;</li>\\n<li>With <strong>less assets</strong> to download, the number of urls crawled are <strong>widely boosted</strong>;</li>\\n<li>Bots, &lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;PageSpeed Insights</a>, &lt;a href=&quot;https://web.dev/measure/&quot;&gt;Google Measure</a> and &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse&quot;&gt;Lighthouse Audit</a> are already pruned by the plugin with the default configuration;</li>\\n<li>Faster &lt;a href=&quot;https://web.dev/vitals/&quot;&gt;web-vitals</a>, faster TTI, faster FCP, faster FMP, <strong>faster all</strong>.</li>\\n</ul>\\n<p><strong>N.B.:</strong> <em>This is known as &lt;a href=&quot;https://developers.google.com/search/docs/guides/dynamic-rendering&quot;&gt;Dynamic Rendering</a> and <strong>it's not</strong> considered &lt;a href=&quot;https://www.wordstream.com/black-hat-seo&quot;&gt;black-hat</a> or &lt;a href=&quot;https://en.wikipedia.org/wiki/Cloaking&quot;&gt;cloaking</a></em>.</p>\\n<hr>\\n<h4>💡 Lighthouse</h4>\\n<p>&lt;img src=&quot;./src/static/lighthouse/before.jpg&quot; alt=&quot;Lighthouse Audit before&quot;&gt;<br>\\n&lt;img src=&quot;./src/static/lighthouse/after.jpg&quot; alt=&quot;Lighthouse Audit after&quot;&gt;</p>\\n<hr>\\n<h2>Setup</h2>\\n<ol>\\n<li><strong>Install</strong> <code>@luxdamore/nuxt-prune-html</code> as a dependency:\\n<ul>\\n<li><code>yarn add @luxdamore/nuxt-prune-html</code>;</li>\\n<li>or, <code>npm install --save @luxdamore/nuxt-prune-html</code>;</li>\\n</ul>\\n</li>\\n<li><strong>Append</strong> <code>@luxdamore/nuxt-prune-html</code> to the <code>modules</code> array of your <code>nuxt.config.js</code>.</li>\\n</ol>\\n<h2>Configuration</h2>\\n<pre>&lt;code class=&quot;language-js&quot;&gt;\\n    &lt;span class=&quot;hljs-comment&quot;&gt;// nuxt.config.js</span>\\n    &lt;span class=&quot;hljs-keyword&quot;&gt;export</span> &lt;span class=&quot;hljs-keyword&quot;&gt;default</span> {\\n\\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Module - installation</span>\\n        &lt;span class=&quot;hljs-attr&quot;&gt;modules</span>: [ &lt;span class=&quot;hljs-string&quot;&gt;'@luxdamore/nuxt-prune-html'</span> ],\\n\\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Module - default config</span>\\n        &lt;span class=&quot;hljs-attr&quot;&gt;pruneHtml</span>: {\\n            &lt;span class=&quot;hljs-attr&quot;&gt;enabled</span>: &lt;span class=&quot;hljs-literal&quot;&gt;false</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// <code>true</code> in production</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;hideGenericMessagesInConsole</span>: &lt;span class=&quot;hljs-literal&quot;&gt;false</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// <code>false</code> in production</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;hideErrorsInConsole</span>: &lt;span class=&quot;hljs-literal&quot;&gt;false</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// deactivate the <code>console.error</code> method</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;hookRenderRoute</span>: &lt;span class=&quot;hljs-literal&quot;&gt;true</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// activate <code>hook:render:route</code></span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;hookGeneratePage</span>: &lt;span class=&quot;hljs-literal&quot;&gt;true</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// activate <code>hook:generate:page</code></span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;selectors</span>: [\\n                &lt;span class=&quot;hljs-comment&quot;&gt;// CSS selectors to prune</span>\\n                &lt;span class=&quot;hljs-string&quot;&gt;'link[rel=&quot;preload&quot;][as=&quot;script&quot;]'</span>,\\n                &lt;span class=&quot;hljs-string&quot;&gt;'script:not([type=&quot;application/ld+json&quot;])'</span>,\\n            ],\\n            &lt;span class=&quot;hljs-attr&quot;&gt;classesSelectorsToKeep</span>: [], &lt;span class=&quot;hljs-comment&quot;&gt;// disallow pruning of scripts with this classes, n.b.: each <code>classesSelectorsToKeep</code> is appended to every <code>selectors</code>, ex.: <code>link[rel=&amp;quot;preload&amp;quot;][as=&amp;quot;script&amp;quot;]:not(<strong>classesSelectorsToKeep</strong>)</code></span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;link</span>: [], &lt;span class=&quot;hljs-comment&quot;&gt;// inject custom links, only if pruned</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;script</span>: [], &lt;span class=&quot;hljs-comment&quot;&gt;// inject custom scripts, only if pruned</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;htmlElementClass</span>: &lt;span class=&quot;hljs-literal&quot;&gt;null</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// a string added as a class to the &lt;html&gt; element if pruned</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;cheerio</span>: {\\n                &lt;span class=&quot;hljs-comment&quot;&gt;// the config passed to the <code>cheerio.load(<strong>config</strong>)</code> method</span>\\n                &lt;span class=&quot;hljs-attr&quot;&gt;xmlMode</span>: &lt;span class=&quot;hljs-literal&quot;&gt;false</span>,\\n            },\\n            &lt;span class=&quot;hljs-attr&quot;&gt;types</span>: [\\n                &lt;span class=&quot;hljs-comment&quot;&gt;// it's possibile to add different rules for pruning</span>\\n                &lt;span class=&quot;hljs-string&quot;&gt;'default-detect'</span>,\\n            ],\\n\\n            &lt;span class=&quot;hljs-comment&quot;&gt;// 👇🏻 Type: <code>default-detect</code></span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;headerNameForDefaultDetection</span>: &lt;span class=&quot;hljs-string&quot;&gt;'user-agent'</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// The <code>header-key</code> base for <code>MobileDetection</code>, usage <code>request.headers[ headerNameForDefaultDetection ]</code></span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;auditUserAgent</span>: &lt;span class=&quot;hljs-string&quot;&gt;'lighthouse'</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// prune if <code>request.header[ headerNameForDefaultDetection ]</code> match, could be a string or an array of strings</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;isAudit</span>: &lt;span class=&quot;hljs-literal&quot;&gt;true</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// remove selectors if match with <code>auditUserAgent</code></span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;isBot</span>: &lt;span class=&quot;hljs-literal&quot;&gt;true</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// remove selectors if is a bot</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;ignoreBotOrAudit</span>: &lt;span class=&quot;hljs-literal&quot;&gt;false</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// remove selectors in any case, not depending on Bot or Audit</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;matchUserAgent</span>: &lt;span class=&quot;hljs-literal&quot;&gt;null</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// prune if <code>request.header[ headerNameForDefaultDetection ]</code> match, could be a string or an array of strings</span>\\n\\n            &lt;span class=&quot;hljs-comment&quot;&gt;// 👇🏻 Type: 'query-parameters'</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;queryParametersToPrune</span>: [\\n                &lt;span class=&quot;hljs-comment&quot;&gt;// array of objects (key-value)</span>\\n                &lt;span class=&quot;hljs-comment&quot;&gt;// trigger the pruning if 'query-parameters' is present in <code>types</code> and at least one value is matched, ex. <code>/?prune=true</code></span>\\n                {\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;key</span>: &lt;span class=&quot;hljs-string&quot;&gt;'prune'</span>,\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;value</span>: &lt;span class=&quot;hljs-string&quot;&gt;'true'</span>,\\n                },\\n            ],\\n            &lt;span class=&quot;hljs-attr&quot;&gt;queryParametersToExcludePrune</span>: [], &lt;span class=&quot;hljs-comment&quot;&gt;// same as <code>queryParametersToPrune</code>, exclude the pruning if 'query-parameters' is present in <code>types</code> and at least one value is matched, this priority is over than <code>queryParametersToPrune</code></span>\\n\\n            &lt;span class=&quot;hljs-comment&quot;&gt;// 👇🏻 Type: 'headers-exist'</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;headersToPrune</span>: [], &lt;span class=&quot;hljs-comment&quot;&gt;// same as <code>queryParametersToPrune</code>, but it checks <code>request.headers</code></span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;headersToExcludePrune</span>: [], &lt;span class=&quot;hljs-comment&quot;&gt;// same as <code>queryParamToExcludePrune</code>, but it checks <code>request.headers</code>, this priority is over than <code>headersToPrune</code></span>\\n\\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Emitted events for callbacks methods</span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;onBeforePrune</span>: &lt;span class=&quot;hljs-literal&quot;&gt;null</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// ({ result, [ req, res ] }) =&gt; {}, <code>req</code> and <code>res</code> are not available on <code>nuxt generate</code></span>\\n            &lt;span class=&quot;hljs-attr&quot;&gt;onAfterPrune</span>: &lt;span class=&quot;hljs-literal&quot;&gt;null</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// ({ result, [ req, res ] }) =&gt; {}, <code>req</code> and <code>res</code> are not available on <code>nuxt generate</code></span>\\n        },\\n\\n    };\\n\\n</code></pre>\\n<p>With <code>link</code> and <code>script</code> it's possibile to add one or more objects on the pruned HTML, ex.:</p>\\n<pre>&lt;code class=&quot;language-javascript&quot;&gt;\\n    &lt;span class=&quot;hljs-keyword&quot;&gt;export</span> &lt;span class=&quot;hljs-keyword&quot;&gt;default</span> {\\n        &lt;span class=&quot;hljs-attr&quot;&gt;pruneHtml</span>: {\\n            &lt;span class=&quot;hljs-attr&quot;&gt;link</span>: [\\n                {\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;rel</span>: &lt;span class=&quot;hljs-string&quot;&gt;'preload'</span>,\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;as</span>: &lt;span class=&quot;hljs-string&quot;&gt;'script'</span>,\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;href</span>: &lt;span class=&quot;hljs-string&quot;&gt;'/my-custom-lazy-load-for-bots.js'</span>,\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;position</span>: &lt;span class=&quot;hljs-string&quot;&gt;'phead'</span>, &lt;span class=&quot;hljs-comment&quot;&gt;// Default value is 'body', other allowed values are: 'phead', 'head' and 'pbody'</span>\\n                },\\n                {\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;rel</span>: &lt;span class=&quot;hljs-string&quot;&gt;'stylesheet'</span>,\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;href</span>: &lt;span class=&quot;hljs-string&quot;&gt;'/my-custom-styles-for-bots.css'</span>,\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;position</span>: &lt;span class=&quot;hljs-string&quot;&gt;'head'</span>,\\n                },\\n            ],\\n            &lt;span class=&quot;hljs-attr&quot;&gt;script</span>: [\\n                {\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;src</span>: &lt;span class=&quot;hljs-string&quot;&gt;'/my-custom-lazy-load-for-bots.js'</span>,\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;lazy</span>: &lt;span class=&quot;hljs-literal&quot;&gt;true</span>,\\n                    &lt;span class=&quot;hljs-attr&quot;&gt;defer</span>: &lt;span class=&quot;hljs-literal&quot;&gt;true</span>,\\n                },\\n            ],\\n        },\\n    };\\n\\n</code></pre>\\n<blockquote>\\n<p><strong>N.B.:</strong> <em>the config is only shallow merged, not deep merged</em>.</p>\\n</blockquote>\\n<h3>Types / Rules</h3>\\n<p>Possible values are <code>[ 'default-detect', 'query-parameters', 'headers-exist' ]</code>:</p>\\n<ul>\\n<li><code>default-detect</code>: prune based on <strong>one header</strong>(<code>request.headers[ headerNameForDefaultDetection ]</code>)\\n<ul>\\n<li>different checks with &lt;a href=&quot;https://hgoebl.github.io/mobile-detect.js/&quot;&gt;MobileDetect</a>:\\n<ul>\\n<li><code>isBot</code>, trigger <code>.is( 'bot' )</code> method;</li>\\n<li><code>auditUserAgent</code> or <code>matchUserAgent</code>, trigger <code>.match()</code> method;</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><code>query-parameters</code>: prune based on <strong>one or more query parameter</strong>, tests <code>key / value</code> based on <code>queryParametersToPrune / queryParametersToExcludePrune</code>:\\n<ul>\\n<li>you can also specify routes in <code>nuxt.config</code>, ex. <em><code>{ generate: { routes: [ '/?prune=true' ] } }</code></em></li>\\n</ul>\\n</li>\\n<li><code>headers-exist</code>: prune based on <strong>one or more header</strong>, tests <code>key / value</code> based on <code>headersToPrune / headersToExcludePrune</code>.</li>\\n</ul>\\n<p>N.B.: <em>It's possibile to mix different types.</em></p>\\n<hr>\\n<h3>Related things you should know</h3>\\n<ul>\\n<li>Nuxt &lt;a href=&quot;https://nuxtjs.org/api/configuration-hooks/&quot;&gt;hooks</a>, the plugin has access to <code>request.headers</code> only if the project is <strong>running as a server</strong> (ex. <code>nuxt start</code>)\\n<ul>\\n<li>If you <code>generate</code> your site it's not possibile to check <em>request.headers</em>, so (for <code>types: [ 'default-detect', 'headers-exist' ]</code>) it <strong>always prune</strong>, but You can disable this behavior by setting <code>hookGeneratePage</code> to <code>false</code> (or by using the type <code>query-parameters</code>);</li>\\n</ul>\\n</li>\\n<li>Usage with <code>types: [ 'default-detect' ]</code>, load the &lt;a href=&quot;https://hgoebl.github.io/mobile-detect.js/&quot;&gt;MobileDetect</a> library;</li>\\n<li>It use &lt;a href=&quot;https://github.com/cheeriojs/cheerio&quot;&gt;Cheerio</a>, <em>jQuery for servers</em>, library to <strong>filter and prune</strong> the html.</li>\\n</ul>\\n<hr>\\n<h3>Advices</h3>\\n<ul>\\n<li>Before setting up the module, try to &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/javascript/disable&quot;&gt;Disable JavaScript With Chrome DevTools</a> while navigate your website, <strong>this is how your website appear (when <em>nuxt-prune-html</em> is enabled)</strong>;</li>\\n<li>For &lt;a href=&quot;https://nuxtjs.org/api/components-client-only/&quot;&gt;<code>&lt;client-only&gt;</code> components</a> you should prepare a version that is visually the same with the &lt;a href=&quot;https://nuxtjs.org/api/components-client-only/&quot;&gt;placeholder slot</a>;</li>\\n<li>You can check the website as a <em>GoogleBot</em>, following &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/device-mode/override-user-agent&quot;&gt;this guide</a>.</li>\\n</ul>\\n<hr>\\n<h2>👩🏻‍💻👨🏻‍💻 Development</h2>\\n<ol>\\n<li><strong>Clone</strong> the repository:\\n<ul>\\n<li><code>git clone https://github.com/LuXDAmore/nuxt-prune-html.git</code>;</li>\\n</ul>\\n</li>\\n<li><strong>Install</strong> dependencies:\\n<ul>\\n<li><code>yarn install</code> (or <code>npm install</code>);</li>\\n</ul>\\n</li>\\n<li><strong>Start</strong> a development server:\\n<ul>\\n<li><code>yarn dev</code> (or <code>npm run dev</code>);</li>\\n</ul>\\n</li>\\n<li><strong>Test</strong> your code:\\n<ul>\\n<li><code>yarn test</code> (or <code>npm run test</code>);</li>\\n</ul>\\n</li>\\n<li><strong>Extra</strong>, generate the documentation (&lt;a href=&quot;https://pages.github.com/&quot;&gt;<em>Github Pages</em></a>):\\n<ul>\\n<li><code>yarn generate</code> (or <code>npm run generate</code>);</li>\\n<li><em>the content is automatically generated into the <code>/docs</code> folder</em>.</li>\\n</ul>\\n</li>\\n</ol>\\n<h2>🐞 Issues</h2>\\n<p>Please make sure to read the &lt;a href=&quot;./.github/ISSUE_TEMPLATE/bug_report.md&quot;&gt;<strong>issue reporting checklist</strong></a> before opening an issue.<br>\\n<em>Issues not conforming to the guidelines may be closed immediately</em>.</p>\\n<h2>📝 Discussions</h2>\\n<p>We're using &lt;a href=&quot;https://github.com/LuXDAmore/nuxt-prune-html/discussions&quot;&gt;<strong>Github discussions</strong></a> as a place to connect with other members of our community.<br>\\n<em>You are free to ask questions and share ideas, so enjoy yourself</em>.</p>\\n<h2>👥 Contribution</h2>\\n<p>Please make sure to read the &lt;a href=&quot;./.github/ISSUE_TEMPLATE/feature_request.md&quot;&gt;<strong>contributing guide</strong></a> before making a pull request.</p>\\n<h2>📖 Changelog</h2>\\n<p>Details changes for each release are documented in the &lt;a href=&quot;./CHANGELOG.md&quot;&gt;<strong>release notes</strong></a>.</p>\\n<h3>🆓 License</h3>\\n<p>&lt;a href=&quot;./LICENSE&quot;&gt;MIT License</a> // Copyright (©) 2019-now &lt;a href=&quot;https://lucaiaconelli.it&quot;&gt;Luca Iaconelli</a></p>\\n<h4>💼 Hire me</h4>\\n<p>&lt;a href=&quot;https://curriculumvitae.lucaiaconelli.it&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Contact%20Me-Let's%20Talk-informational?style=social&amp;logo=minutemailer&quot; alt=&quot;Contacts&quot;&gt;</a></p>\\n<h4>💸 Are you feeling generous today?</h4>\\n<p>If You want to share a beer, we can be really good friends 😄</p>\\n<p><strong>&lt;a href=&quot;https://www.paypal.me/luxdamore&quot;&gt;Paypal</a> // &lt;a href=&quot;https://www.patreon.com/luxdamore&quot;&gt;Patreon</a> // &lt;a href=&quot;https://ko-fi.com/luxdamore&quot;&gt;Ko-fi</a></strong></p>\\n<blockquote>\\n<p>☀ <em>It's always a good day to be magnanimous</em> - cit.</p>\\n</blockquote>\\n</section>\\n&quot;;</p>\\n</section>\\n&quot;;</p>\\n</section>\\n&quot;;</p>\\n</section>\\n&quot;;</p>\\n</section>\\n&quot;;</p>\n</section>\n".split("./src/static/").join("");r.a.registerLanguage("bash",d.a),r.a.registerLanguage("javascript",m.a);var v={name:"homepage",computed:{readme:function(){return j}},mounted:function(){var t=this;return Object(n.a)(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.$nextTick();case 2:t.initHighlight(),t.initReadmeLinks();case 4:case"end":return e.stop()}}),e)})))()},methods:{initHighlight:function(){var t,e=f(document.querySelectorAll(".readme code"));try{for(e.s();!(t=e.n()).done;){var o=t.value;r.a.highlightBlock(o)}}catch(t){e.e(t)}finally{e.f()}},initReadmeLinks:function(){var t,e=f(document.querySelectorAll(".readme a"));try{for(e.s();!(t=e.n()).done;){var link=t.value;link.setAttribute("target","_blank"),link.setAttribute("rel","noopener"),link.textContent&&link.setAttribute("title",link.textContent),link.getAttribute("href").startsWith("./")&&link.setAttribute("href",link.getAttribute("href").replace("./","https://github.com/LuXDAmore/nuxt-prune-html/tree/master/"))}}catch(t){e.e(t)}finally{e.f()}}}},x=(o(277),o(279),o(281),o(42)),component=Object(x.a)(v,(function(){var t=this,e=t.$createElement,o=t._self._c||e;return t.readme?o("article",{staticClass:"readme markdown-body",domProps:{innerHTML:t._s(t.readme)}}):t._e()}),[],!1,null,"13e3c915",null);e.default=component.exports}}]);